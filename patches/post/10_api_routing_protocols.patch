diff --git a/fabric/v4/api_routing_protocols.go b/fabric/v4/api_routing_protocols.go
index 12f7efb..3a8aa30 100644
--- a/fabric/v4/api_routing_protocols.go
+++ b/fabric/v4/api_routing_protocols.go
@@ -27,6 +27,39 @@ var (

 type RoutingProtocolsApiService service

+
+func (a *RoutingProtocolsApiService) decodeRP(v *RoutingProtocolData, b []byte, contentType string) (err error) {
+	//get type of response body
+	var (
+		localVarReturnBGP    RoutingProtocolBgpData
+		localVarReturnDirect RoutingProtocolDirectData
+	)
+
+	err = a.client.decode(&v, b, contentType)
+	if err != nil {
+		return err
+	}
+	// decode response based on type, overwrite return value's oneof field
+	if v.Type_ == "BGP" {
+		// If we succeed, return the data, otherwise pass on to decode error.
+		err = a.client.decode(&localVarReturnBGP, b, contentType)
+		// try decoding as a bgp, return if no error
+		if err == nil {
+			v.RoutingProtocolBgpData = localVarReturnBGP
+			return err
+		}
+	}
+	if v.Type_ == "DIRECT" {
+		// try decoding as a direct rp
+		err = a.client.decode(&localVarReturnDirect, b, contentType)
+		if err == nil {
+			v.RoutingProtocolDirectData = localVarReturnDirect
+			return err
+		}
+	}
+	return err
+}
+
 /*
 RoutingProtocolsApiService Create Protocol
 This API provides capability to create Routing Protocol for connections
@@ -90,8 +123,8 @@ func (a *RoutingProtocolsApiService) CreateConnectionRoutingProtocol(ctx context

 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-		if err == nil {
+		err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		if err != nil {
 			return localVarReturnValue, localVarHttpResponse, err
 		}
 	}
@@ -103,7 +136,7 @@ func (a *RoutingProtocolsApiService) CreateConnectionRoutingProtocol(ctx context
 		}
 		if localVarHttpResponse.StatusCode == 202 {
 			var v RoutingProtocolData
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+			err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 			if err != nil {
 				newErr.error = err.Error()
 				return localVarReturnValue, localVarHttpResponse, newErr
@@ -240,6 +273,7 @@ func (a *RoutingProtocolsApiService) CreateConnectionRoutingProtocolsInBulk(ctx

 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
+		// fixme: why is this a get response?
 		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 		if err == nil {
 			return localVarReturnValue, localVarHttpResponse, err
@@ -389,7 +423,7 @@ func (a *RoutingProtocolsApiService) DeleteConnectionRoutingProtocolByUuid(ctx c

 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 		if err == nil {
 			return localVarReturnValue, localVarHttpResponse, err
 		}
@@ -402,7 +436,7 @@ func (a *RoutingProtocolsApiService) DeleteConnectionRoutingProtocolByUuid(ctx c
 		}
 		if localVarHttpResponse.StatusCode == 202 {
 			var v RoutingProtocolData
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+			err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 			if err != nil {
 				newErr.error = err.Error()
 				return localVarReturnValue, localVarHttpResponse, newErr
@@ -701,7 +735,7 @@ func (a *RoutingProtocolsApiService) GetConnectionRoutingProtocolByUuid(ctx cont

 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 		if err == nil {
 			return localVarReturnValue, localVarHttpResponse, err
 		}
@@ -714,7 +748,7 @@ func (a *RoutingProtocolsApiService) GetConnectionRoutingProtocolByUuid(ctx cont
 		}
 		if localVarHttpResponse.StatusCode == 200 {
 			var v RoutingProtocolData
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+			err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 			if err != nil {
 				newErr.error = err.Error()
 				return localVarReturnValue, localVarHttpResponse, newErr
@@ -1439,7 +1473,7 @@ func (a *RoutingProtocolsApiService) PatchConnectionRoutingProtocolByUuid(ctx co

 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 		if err == nil {
 			return localVarReturnValue, localVarHttpResponse, err
 		}
@@ -1452,7 +1486,7 @@ func (a *RoutingProtocolsApiService) PatchConnectionRoutingProtocolByUuid(ctx co
 		}
 		if localVarHttpResponse.StatusCode == 202 {
 			var v RoutingProtocolData
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+			err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 			if err != nil {
 				newErr.error = err.Error()
 				return localVarReturnValue, localVarHttpResponse, newErr
@@ -1743,7 +1777,7 @@ func (a *RoutingProtocolsApiService) ReplaceConnectionRoutingProtocolByUuid(ctx

 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.decodeRP(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 		if err == nil {
 			return localVarReturnValue, localVarHttpResponse, err
 		}
@@ -1756,7 +1790,7 @@ func (a *RoutingProtocolsApiService) ReplaceConnectionRoutingProtocolByUuid(ctx
 		}
 		if localVarHttpResponse.StatusCode == 202 {
 			var v RoutingProtocolData
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+			err = a.decodeRP(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
 			if err != nil {
 				newErr.error = err.Error()
 				return localVarReturnValue, localVarHttpResponse, newErr
@@ -1828,4 +1862,4 @@ func (a *RoutingProtocolsApiService) ReplaceConnectionRoutingProtocolByUuid(ctx
 	}

 	return localVarReturnValue, localVarHttpResponse, nil
-}
+}
\ No newline at end of file